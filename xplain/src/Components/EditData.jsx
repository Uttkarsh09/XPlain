/* eslint-disable no-unused-vars */
import React, { useState, useRef, useEffect } from "react";
import DisplaySvg from "./Utilities/DisplaySvg";
import axios from "axios";
import { toast } from "react-toastify";
import {
	updateUserInfo,
	removeUserInfo,
	addUserInfo,
} from "./Store/Slices/UserSlice";
import useUserInfo from "./Hooks/useUserInfo";
import { useDispatch } from "react-redux";
import { useHistory } from "react-router";
import useEnvironmentVariables from "./Hooks/useEvnironmentVariables";
import "../styles/CSS/editData.css";
import { validateSignupFields } from "./Utilities/validation";

// When editing the fields
// send the axios request, change the global redux state, and redirect
// When deactivating the fields
// remove the data from the global state and send logout request and try deleting the cookies

function EditData({ defaultProfilePhoto, name, username, setEditUserData }) {
	name = name.trim();
	const {userId} = useUserInfo();
	const dispatch = useDispatch();
	const profilePhoto = defaultProfilePhoto;
	const [inputName, setInputName] = useState(name);
	const [inputUsername, setInputUsername] = useState(username);
	const nameRef = useRef();
	const usernameRef = useRef();
	const history = useHistory();
	const env_var = useEnvironmentVariables();

	function onNameChange(e) {
		setInputName(e.target.value);
	}
	function onUsrnmChange(e) {
		setInputUsername(e.target.value);
	}

	useEffect(() => {
		nameRef.current.focus();
	}, []);

	function onSave() {
		// VALIDATION
		const fieldsChanged = { username: false, name: false };
		if (name === inputName && inputUsername === username) {
			toast.warn("No field is edited");
			return;
		} else if (inputUsername !== username) {
			fieldsChanged.username = true;
		} else if (name !== inputName) {
			fieldsChanged.name = true;
		}

		// VERIFICATION
		const validationResult = validateSignupFields(name, username);
		if (!validationResult.valid) {
			toast.error(validationResult.message.toUpperCase());
			if (validationResult.focusOn === "name") {
				nameRef.current.focus();
			} else if (validationResult.focusOn === "username") {
				usernameRef.current.focus();
			}
			return;
		}

		// UPDATION
		axios
			.put(`${env_var.REACT_APP_BACKEND_URL}/user/update-data/${username}`, {
				username: inputUsername,
				name: inputName,
				userId: userId,
				defaultProfilePhoto: profilePhoto,
				fieldsChanged,
			})
			.then((res) => {
				toast.success("User data updated!");
				// const newProfilePicture = res.data.defaultProfilePhoto;

				if (fieldsChanged.username === true) {
					axios
						.post(
							`${env_var.REACT_APP_BACKEND_URL}/logout`,
							{},
							{ withCredentials: true }
						)
						.then((_) => console.log("LOGOUT SUCCESSFULL"))
						.catch((err) =>
							console.log("There was an error while logging out after editing")
						);

					axios
						.post(
							`${env_var.REACT_APP_BACKEND_URL}/user/login`,
							{ username: inputUsername, bypassPassword: true },
							{ withCredentials: true }
						)
						.then((res) => {
							console.log("Logging in again....with a new session");
							dispatch(
								updateUserInfo({
									userId: res.data.userId,
									username: res.data.username,
									profilePhoto: profilePhoto,
								})
							);
							setEditUserData(false);
							history.push(`/user-profile/${inputUsername}`);
						});
				} else {
					history.go(0);
				}
			})
			.catch((err) => {
				if (err.response.data.errMsg === "USERNAME_ALREADY_PRESENT") {
					toast.error("USERNAME ALREADY TAKEN");
					return;
				}
				console.log("Error in EditData");
				console.log(err);
			});
	}

	function onDeactivate() {
		axios
			.post(`${env_var.REACT_APP_BACKEND_URL}/deactivate/${username}`)
			.then((res) => {
				if (res.data.msg !== "USER_DELETED") {
					console.log("USER NOT DELETED");
				}
				dispatch(removeUserInfo());
				toast.success("User deleted!");
				history.push("/");
				return;
			})
			.catch((err) => {
				console.log("USER NOT DELETED");
				toast.error("USER NOT DELETED. TRY AGAIN IN SOME TIME");
			});
	}

	return (
		<div className="user-profile container">
			<div>
				{profilePhoto ? (
					<DisplaySvg
						onClick={() => {
							toast.error(
								"Sorry, you cannot change profile photo, it is autogenerated based off your username"
							);
						}}
						className="profile-photo"
						svgString={profilePhoto}
					/>
				) : (
					<img
						src={window.location.origin + "/profile.svg"}
						className="profile-photo"
						alt=""
					/>
				)}
			</div>

			<ul className="user-info-list">
				<li className="user-info name">
					<span className="tag tag-name">NAME :</span>
					<span>
						<input
							type="text"
							ref={nameRef}
							value={inputName}
							onChange={onNameChange}
						/>
					</span>
				</li>

				<li className="user-info username">
					<span className="tag">UNAME :</span>
					<span>
						<input
							type="text"
							value={inputUsername}
							ref={usernameRef}
							onChange={onUsrnmChange}
						/>
					</span>
				</li>
			</ul>

			<div className="action-btns">
				<button className="btn-edit btn-save" id="btn-edit" onClick={onSave}>
					SAVE ‚úèÔ∏è
				</button>
				<button className="btn-logout" onClick={onDeactivate}>
					DEACTIVATE üëã
				</button>
			</div>
			<button
				className="btn-cancel-edit"
				onClick={() => {
					setEditUserData(false);
				}}
			>
				Cancel
			</button>
		</div>
	);
}

export default EditData;
